
local 普攻计算 = class()
local jhf = string.format
local random = math.random
local qz=math.floor
local sj = 取随机数

function 普攻计算:初始化()
end

function 普攻计算:普通攻击计算(编号,伤害比,友伤,战斗数据)
	local 目标=战斗数据.参战单位[编号].指令.目标
	if 目标==0 or 目标==nil then
		目标=战斗数据:取单个敌方目标(编号)
	elseif 战斗数据:取目标状态(编号,目标,1)==false then
		目标=战斗数据:取单个敌方目标(编号)
	elseif 战斗数据.参战单位[编号].指令.取消 then
		return
	end
	if 目标==0 then
		return
	end
	if 战斗数据.参战单位[目标].法术状态.分身术~=nil and 战斗数据.参战单位[目标].法术状态.分身术.破解==nil then
		战斗数据.参战单位[目标].法术状态.分身术.破解=1
		return
	end
	if 战斗数据.参战单位[编号].从天而降 and 取随机数() < 10 then
		战斗数据.执行等待=战斗数据.执行等待+10
		if 战斗数据.参战单位[编号].模型=="超级神鸡" or 战斗数据.参战单位[编号].模型=="进阶超级神鸡" then
		    战斗数据.战斗流程[#战斗数据.战斗流程+1]={流程=210,攻击方=编号}
		else
			战斗数据.战斗流程[#战斗数据.战斗流程+1]={流程=1,攻击方=编号,挨打方={[1]={挨打方=目标,特效={}}}}
		 	战斗数据.战斗流程[#战斗数据.战斗流程].假动作 = true
			战斗数据.战斗流程[#战斗数据.战斗流程].返回 = true
		end
	    return
	end
	战斗数据.战斗流程[#战斗数据.战斗流程+1]={流程=1,攻击方=编号,挨打方={[1]={挨打方=目标,特效={}}}} --,攻击动作=取随机数(1,2) 攻击动作可以写成暴击之后 用第二个攻击
	if 战斗数据.参战单位[编号].嗜血幡~=nil and 取随机数()<=70 then --嗜血幡触发追加法术 --
		战斗数据.执行等待=战斗数据.执行等待+10
	    战斗数据.战斗流程[#战斗数据.战斗流程].假动作 = true
		战斗数据.战斗流程[#战斗数据.战斗流程].返回 = true
		return
	end

	local 躲避=false
	local 附加躲避 = 0
	local 附加命中 = 0
    if 战斗数据.参战单位[目标].法术状态.舞雪冰蝶 then
        附加躲避 = 30
    elseif 战斗数据.参战单位[目标].躲避减少 then
        附加躲避 = 战斗数据.参战单位[目标].躲避减少
    end
    if 战斗数据.参战单位[编号].撞击~=nil then
        附加命中 = 战斗数据.参战单位[编号].撞击
    end

	if 战斗数据.参战单位[编号].断线木偶~=nil then
	    躲避 = true
    elseif not 战斗数据.参战单位[编号].必中 and 取随机数()<=附加躲避 then
	    躲避 = true
	end
	if 躲避 then
		战斗数据.战斗流程[#战斗数据.战斗流程].躲避=true
		战斗数据.战斗流程[#战斗数据.战斗流程].返回=true
		return
	end

	战斗数据.执行等待=战斗数据.执行等待+10
	local  必杀=false
	local  防御=false
	local  反震=false
	local  反击=false
	local  必杀几率,暴击倍率 = 0,2
	local  伤害=战斗数据:取基础物理伤害(编号,目标) * 伤害比
	local  最终伤害=战斗数据:取最终物理伤害(编号,目标,伤害,必杀几率,暴击倍率)
	local  保护=false
	local  保护编号=0
	if 战斗数据.参战单位[目标].类型 == "角色" and 战斗数据.参战单位[目标].气血 < 战斗数据.参战单位[目标].最大气血*0.5 and 最终伤害.伤害*0.3 < 战斗数据.参战单位[目标].气血 and 最终伤害.伤害 > 战斗数据.参战单位[目标].最大气血*0.1  and 取随机数() < 70 and 友伤 == nil then --
		local 随机保护 = {}
		for n=1,#战斗数据.参战单位 do
			if 保护编号==0 and 战斗数据:取行动状态(n) and 战斗数据.参战单位[目标].法术状态.惊魂掌==nil and 战斗数据.参战单位[n].队伍==战斗数据.参战单位[目标].队伍 and 战斗数据.参战单位[n].类型 == "角色" and n ~= 目标 then
				table.insert(随机保护,n)
			end
		end
		if #随机保护 >= 1 then
			保护编号 = 随机保护[取随机数(1,#随机保护)]
			保护=true
			战斗数据.执行等待=战斗数据.执行等待+5
		end
	else
		for n=1,#战斗数据.参战单位 do
			if 保护编号==0 and 战斗数据:取行动状态(n) and 战斗数据.参战单位[目标].法术状态.惊魂掌==nil and 战斗数据.参战单位[n].指令 ~= nil and 战斗数据.参战单位[n].指令.类型=="保护" and  战斗数据.参战单位[n].队伍==战斗数据.参战单位[目标].队伍 and  战斗数据.参战单位[n].指令.目标==目标 and 友伤 == nil then
				保护编号=n
				保护=true
				战斗数据.参战单位[n].指令.类型=""
				战斗数据.执行等待=战斗数据.执行等待+3
			end
		end
	end
	if 战斗数据.参战单位[目标].指令 ~= nil and 战斗数据.参战单位[目标].指令.类型 == "防御" and 战斗数据:取行动状态(目标) and 战斗数据:取可否防御(目标) then
		最终伤害.伤害 = 最终伤害.伤害 * 0.5
		最终伤害.动作 = "防御"
		防御 = true
		if 战斗数据.参战单位[目标].点石成金 then
		   最终伤害.伤害=最终伤害.伤害*战斗数据.参战单位[目标].点石成金
		end
		if 战斗数据:取经脉(目标, "击破") then
			最终伤害.伤害 = 最终伤害.伤害 *1.5
		end
		if 战斗数据.参战单位[目标].法术状态.愈勇 then
		    战斗数据:取消状态("愈勇",战斗数据.参战单位[目标])
		end
	end

	if 友伤 ~= nil then --要计算物理伤害结果
		if 战斗数据.参战单位[目标].法术状态.催眠符==nil then
		    最终伤害.伤害 = 1
		end
		战斗数据.战斗流程[#战斗数据.战斗流程].友伤 = true
	end

	local  结果=战斗数据:取伤害结果(编号,目标,最终伤害.伤害,最终伤害.暴击,保护,1,技能,防御)
	if 战斗数据.参战单位[编号].门派=="盘丝洞" then
		-- if 战斗数据.参战单位[编号].粘附 and 战斗数据.参战单位[目标].法术状态.天罗地网 then
		-- 	结果.伤害=结果.伤害*1.5
		-- end
	    if 战斗数据:取经脉(编号, "盘丝洞", "罗网") then
	       结果.伤害=结果.伤害*1.1
	       if sj()<=70 then
	           战斗数据:添加状态("天罗地网",战斗数据.参战单位[目标],战斗数据.参战单位[编号],战斗数据:取技能等级(编号,"天罗地网"))
	       end
	    end
    elseif 战斗数据.参战单位[编号].从天而降 then
		结果.伤害 = 结果.伤害 * 1.5
	elseif 战斗数据.参战单位[编号].超级必杀 >= 取随机数(1,100) then
    	结果.伤害 = 结果.伤害 * 取随机数(2,3)
    elseif 战斗数据.参战单位[目标].超级招架 and 战斗数据.参战单位[目标].首次被伤.每回物理==0 then
    	结果.伤害 = 结果.伤害 * 0.8
	end

	if 保护 then
		local x1 = 0.7
		local x2 = 0.3
		if 战斗数据.参战单位[编号].势如破竹 then
			x1 = 0.4
			x2 = 0.6
		end
		local 保护伤害=math.floor(结果.伤害*(x1))
		if 保护伤害<1 then 保护伤害=1 end
		local 保护死亡=战斗数据:减少气血(保护编号,保护伤害)
		结果.伤害=math.floor(结果.伤害*(x2))
		if 战斗数据:取经脉(编号,"大唐官府", "破空") then
			结果.伤害=math.floor(结果.伤害*1.1)
		end
		if 保护伤害<1 then 保护伤害=1 end
		战斗数据.战斗流程[#战斗数据.战斗流程].保护数据={编号=保护编号,伤害=保护伤害,死亡=保护死亡}
	end

	if 战斗数据.参战单位[编号].法术状态.落魄符~=nil or 战斗数据.参战单位[编号].法术状态.错乱~=nil or 战斗数据.参战单位[编号].法术状态.发瘟匣~=nil or 战斗数据.参战单位[编号].法术状态.无魂傀儡~=nil then
	    if 取随机数()<=70 then
	       结果.伤害=1
	    end
	end

	结果.伤害 = qz(结果.伤害)
	if 结果.伤害 < 1 then
	   结果.伤害 = 1
	end

	if 战斗数据.参战单位[目标].共生 ~= nil then
		战斗技能:物理共生计算(战斗数据,编号,目标,结果.伤害+1,最终伤害.动作,结果.特效,true)
		return
	end

	if 结果.类型==2 then --恢复状态
		战斗数据:增加气血(目标,结果.伤害)
	else
		战斗数据.战斗流程[#战斗数据.战斗流程].挨打方[1].死亡=战斗数据:减少气血(目标,结果.伤害,编号,"普通攻击",友伤)
		战斗技能:凝光炼彩(战斗数据,目标,结果.伤害)
	end
	战斗数据.战斗流程[#战斗数据.战斗流程].挨打方[1].动作=最终伤害.动作
	if #结果.特效 == 0 then
		战斗数据.战斗流程[#战斗数据.战斗流程].挨打方[1].特效={"被击中"}
 	else
		for i=1,#结果.特效 do
			table.insert(战斗数据.战斗流程[#战斗数据.战斗流程].挨打方[1].特效,结果.特效[i])
		end
	end
	local 吸血=战斗数据.参战单位[编号].吸血
	if 吸血==nil and 战斗数据.参战单位[编号].法术状态.移魂化骨 then
		吸血=战斗数据.参战单位[编号].法术状态.移魂化骨.吸血
	end
	if 吸血~=nil and 战斗数据.参战单位[目标].鬼魂==nil  then
		local 吸血伤害=math.floor(结果.伤害*吸血)
		if 吸血伤害<1 then
			吸血伤害=1
		end
		local ycsh = math.floor(战斗数据.参战单位[编号].气血 + 吸血伤害 - 战斗数据.参战单位[编号].最大气血)/2
		战斗数据:增加气血(编号,math.floor(吸血伤害))
		战斗数据.战斗流程[#战斗数据.战斗流程].吸血伤害=math.floor(吸血伤害)
		if 吸血<0.3 and 战斗数据.参战单位[编号].法术状态.毒==nil and 初始技能计算:取吸血异常(战斗数据,目标) then
		    战斗数据:添加状态("毒", 战斗数据.参战单位[编号],战斗数据.参战单位[目标], 11)
		end
		if ycsh >= 1 and 战斗数据.参战单位[编号].超级吸血 then
			战斗计算:添加护盾(战斗数据,战斗数据.参战单位[编号].序号,ycsh)
		end
	else
		if 战斗数据:取经脉(编号,"狮驼岭","化血") and 取随机数() <=30 then
			local 吸血伤害=math.floor(结果.伤害*0.16)
			if 吸血伤害<1 then
				吸血伤害=1
			end
			战斗数据:增加气血(编号,吸血伤害)
			战斗数据.战斗流程[#战斗数据.战斗流程].吸血伤害=吸血伤害
			if 战斗数据.参战单位[编号].法术状态.毒==nil and 初始技能计算:取吸血异常(战斗数据,目标) then
			    战斗数据:添加状态("毒", 战斗数据.参战单位[编号],战斗数据.参战单位[目标], 11)
			end
		elseif 战斗数据.参战单位[编号].法术状态.狂怒 and 战斗数据.参战单位[编号].法术状态.狂怒.攫取~=nil and 取随机数() <=50 then
			local 吸血伤害=math.floor(结果.伤害*0.16)
			if 吸血伤害<1 then
				吸血伤害=1
			end
			战斗数据:增加气血(编号,吸血伤害)
			战斗数据.战斗流程[#战斗数据.战斗流程].吸血伤害=吸血伤害
			if 战斗数据.参战单位[编号].法术状态.毒==nil and 初始技能计算:取吸血异常(战斗数据,目标) then
			    战斗数据:添加状态("毒", 战斗数据.参战单位[编号],战斗数据.参战单位[目标], 11)
			end
		end
	end
	local 反震=战斗数据.参战单位[目标].反震
	local 反击=战斗数据.参战单位[目标].反击
	if not 反击 then
		反击=战斗数据:取是否反击(编号,目标)
	end
	--local 反击=1
	--local 反震=0.25
	if 结果.伤害>=4 and 战斗数据.参战单位[编号].偷袭==nil and 反震~=nil and 取随机数()<=30 and 保护==false then --触发反震 有保护的情况下不会触发反震、反击
		local 反震伤害=math.floor(结果.伤害*反震)
		战斗数据.战斗流程[#战斗数据.战斗流程].反震伤害=反震伤害
		战斗数据.战斗流程[#战斗数据.战斗流程].反震死亡=战斗数据:减少气血(编号,反震伤害,目标)
		战斗数据.战斗流程[#战斗数据.战斗流程].挨打方[1].特效[#战斗数据.战斗流程[#战斗数据.战斗流程].挨打方[1].特效+1]="反震"
		战斗数据.执行等待=战斗数据.执行等待+2
	elseif 结果.伤害>=4 and 战斗数据.参战单位[目标].法术状态.修罗咒 then
        local 反震伤害=math.floor(结果.伤害*0.5)
        if 反震伤害>=战斗数据.参战单位[目标].等级*8 then
            反震伤害=战斗数据.参战单位[目标].等级*8
        end
        战斗数据.战斗流程[#战斗数据.战斗流程].反震伤害=反震伤害
		战斗数据.战斗流程[#战斗数据.战斗流程].反震死亡=战斗数据:减少气血(编号,反震伤害,目标)
		战斗数据.执行等待=战斗数据.执行等待+2
	elseif 反击~=nil and 取随机数()<=30 and 战斗数据:取行动状态(目标) and 战斗数据.参战单位[编号].偷袭==nil and 保护==false then
		local 反击伤害=math.floor(战斗数据:取基础物理伤害(目标,编号)*反击)
		if 反击伤害<1 then 反击伤害=1 end
		战斗数据.战斗流程[#战斗数据.战斗流程].反击伤害=反击伤害
		战斗数据.战斗流程[#战斗数据.战斗流程].反击死亡=战斗数据:减少气血(编号,反击伤害,目标)
		战斗数据.执行等待=战斗数据.执行等待+5
	end

    local 超反编号=0
		for n=1,#战斗数据.参战单位 do
			if 目标 == 战斗数据.参战单位[n].主人序号 then
				超反编号 = n
			end
		end
	if 超反编号 ~= 0 and 战斗数据.参战单位[超反编号] ~= nil and 战斗数据.参战单位[超反编号].超级反击~=nil and 战斗数据.参战单位[目标].首次被伤.物理==0 then
		if 超反编号 ~= 0 and 战斗数据.参战单位[目标].类型 == "角色" then
			local 反击伤害=math.floor(战斗数据:取基础物理伤害(超反编号,编号)*1)
			if 反击伤害<1 then 反击伤害=1 end
			战斗数据.战斗流程[#战斗数据.战斗流程].超反编号 = 超反编号
			战斗数据.战斗流程[#战斗数据.战斗流程].超反击伤害=反击伤害
			战斗数据.战斗流程[#战斗数据.战斗流程].超反击死亡=战斗数据:减少气血(编号,反击伤害,超反编号)
			战斗数据.执行等待=战斗数据.执行等待+5
	    end
    end
	战斗数据.参战单位[目标].首次被伤.物理 = 战斗数据.参战单位[目标].首次被伤.物理 + 1
    战斗数据.参战单位[目标].首次被伤.每回物理 = 战斗数据.参战单位[目标].首次被伤.每回物理 + 1
    if 战斗数据.参战单位[编号].超强力~=nil and 取随机数(1,100) <= 10 then
	    战斗数据:添加状态("超级强力",战斗数据.参战单位[目标],战斗数据.参战单位[目标],100)
	end
	--计算是否触发毒
	if 战斗数据.参战单位[编号].毒~=nil and 战斗数据.参战单位[编号].毒>=取随机数() and 战斗数据:取封印成功("毒",战斗数据.参战单位[编号].等级,战斗数据.参战单位[编号],战斗数据.参战单位[目标]) then
		战斗数据:添加状态("毒",战斗数据.参战单位[目标],战斗数据.参战单位[编号],战斗数据.参战单位[编号].等级)
	end
	if 战斗数据.参战单位[编号].碎甲刃~=nil and 30>=取随机数() then
	    战斗数据:添加状态("碎甲刃",战斗数据.参战单位[目标],战斗数据.参战单位[编号],战斗数据.参战单位[编号].碎甲刃)
	end
	战斗数据.战斗流程[#战斗数据.战斗流程].挨打方[1].伤害=结果.伤害
	战斗数据.战斗流程[#战斗数据.战斗流程].挨打方[1].伤害类型=结果.类型
	战斗数据.战斗流程[#战斗数据.战斗流程].返回=true
	-- if 最终伤害.暴击 then
	-- 	战斗数据.战斗流程[#战斗数据.战斗流程].挨打方[1].特效[1]="暴击"
	-- end
	if 最终伤害.暴击 and 战斗数据.参战单位[编号].苍鸾怒击==1 then
		战斗数据.参战单位[编号].苍鸾怒击=2
		local 目标1 = 战斗数据:取如意神通目标(编号,目标)
		if 目标1~=0 then
			战斗数据.参战单位[编号].指令.目标 = 目标1
			战斗数据:普通攻击计算(编号,1.1)
			战斗数据:添加状态("苍鸾怒击", 战斗数据.参战单位[编号], 战斗数据.参战单位[编号],11)
		end
		return true
	end
	-- if 战斗数据:取被动(编号,"披坚执锐") then
	-- 	战斗数据.战斗流程[#战斗数据.战斗流程+1]={流程=802,攻击方=编号,挨打方=编号}
	-- end
end

return 普攻计算