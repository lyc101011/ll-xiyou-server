local 游戏活动类 = class()

function 游戏活动类:初始化()end
function 游戏活动类:科举条件检测(连接id,id)
	if 科举数据[id]~=nil and 科举数据[id].次数>=2 then
		常规提示(id,"#Y/你本日可参加科举活动的次数已经耗尽，请明日再来吧")
		return
	elseif 取等级(id)<60 then
		常规提示(id,"#Y/只有等级达到60级的玩家才可参加科举活动")
		return
	end
	if 科举数据[id]==nil then
		科举数据[id]={次数=0}
	end
	科举数据[id].次数=科举数据[id].次数+1
	科举数据[id].天王令=1
	科举数据[id].地王令=2
	科举数据[id].鬼王令=3
	科举数据[id].答对=0
	科举数据[id].答错=0
	科举数据[id].总数=0
	科举数据[id].连对=0
	科举数据[id].起始=os.time()
	设置任务7(id)
	self:设置科举题目(连接id,id)
end

function 游戏活动类:设置科举题目(连接id,id)
	local 序列=取随机数(1,#科举题库)
	local 正确答案=科举题库[序列][4]
	local 随机答案={}
	for n=2,4 do
		随机答案[n-1]={答案=科举题库[序列][n],序列=取随机数(1,9999)}
	end
	table.sort(随机答案,function(a,b) return a.序列>b.序列 end )
	local 显示答案={}
	for n=1,3 do
		显示答案[n]=随机答案[n].答案
	end
	显示答案[#显示答案+1]="使用法宝"
	玩家数据[id].科举数据={题目=科举题库[序列][1],答案=显示答案,正确答案=正确答案}
	玩家数据[id].科举对话=true
	科举数据[id].计时=os.time()
	科举数据[id].总数=科举数据[id].总数+1
	发送数据(连接id,1501,{名称="礼部侍郎",模型="考官2",对话=format("#Y/第%s题：#W/%s",科举数据[id].总数, 玩家数据[id].科举数据.题目),选项= 玩家数据[id].科举数据.答案})
end

function 游戏活动类:科举回答题目(连接id,id,答案,类型) --1天王令 2 帝王令 3使用鬼王令 4鬼王令成功 5 鬼王令失败 6超时
	if 答案=="使用法宝" then --发送法宝界面
		玩家数据[id].科举数据.题目="请选择你要使用的法宝："
		玩家数据[id].科举数据.答案={}
		玩家数据[id].科举数据.答案[1]="天王令(得到正确作答，还可用"..科举数据[id].天王令.."次)"
		玩家数据[id].科举数据.答案[2]="地王令(系统作答，正确率50%,还可用"..科举数据[id].地王令.."次)"
		玩家数据[id].科举数据.答案[3]="鬼王令(战斗闯关，还可用"..科举数据[id].鬼王令.."次)"
		发送数据(连接id,1501,{名称="礼部侍郎",模型="考官2",对话=玩家数据[id].科举数据.题目,选项= 玩家数据[id].科举数据.答案})
		玩家数据[id].科举数据.法宝使用=true
		return
	end
	if 玩家数据[id].科举数据.法宝使用 then
		local 法宝序列=0
		for n=1,3 do
			if 答案==玩家数据[id].科举数据.答案[n] then
				法宝序列=n
			end
		end
		if 法宝序列==0 then
			常规提示(id,"#Y/你没有这样的法宝")
			类型=9
		elseif 法宝序列==1 and 科举数据[id].天王令<=0 then
			常规提示(id,"#Y/你的这种法宝可用次数已经耗尽")
			类型=9
		elseif 法宝序列==2 and 科举数据[id].地王令<=0 then
			常规提示(id,"#Y/你的这种法宝可用次数已经耗尽")
			类型=9
		elseif 法宝序列==3 and 科举数据[id].鬼王令<=0 then
			常规提示(id,"#Y/你的这种法宝可用次数已经耗尽")
			类型=9
		else
			类型=法宝序列
			if 类型==3 then
				科举数据[id].鬼王令=科举数据[id].鬼王令-1
				常规提示(id,"#Y/你使用了鬼王令")
				玩家数据[id].科举数据.法宝使用=nil
				战斗准备类:创建战斗(id,100006,0)
				return
			end
		end
	end
	玩家数据[id].科举数据.法宝使用=nil
	local 正确=false
	玩家数据[id].科举对话=nil
	if 玩家数据[id].角色:取任务(7)==0 and 类型==nil then
		常规提示(id,"#Y/你没有这样的任务")
		return
	end
	if 类型==nil then --正常作答
		if os.time()-科举数据[id].计时<=15 then
			if 答案==玩家数据[id].科举数据.正确答案 then
				正确=true
			end
		else
			常规提示(id,"#Y/答题超时！")
		end
	elseif 类型==1 then
		正确=true
		科举数据[id].天王令=科举数据[id].天王令-1
		常规提示(id,"#Y/你使用了天王令")
	elseif 类型==2 then
		if 取随机数()<=50 then 正确=true  end
		科举数据[id].地王令=科举数据[id].地王令-1
		常规提示(id,"#Y/你使用了地王令")
	elseif 类型==4 then
		正确=true
	end
	if 正确 then
		科举数据[id].答对=科举数据[id].答对+1
		科举数据[id].连对= 科举数据[id].连对+1
		if 科举数据[id].连对>=3 then
			科举数据[id].连对=0
			科举数据[id].鬼王令=科举数据[id].鬼王令+1
			常规提示(id,"#Y/连续答对三道题#R/鬼王令+1")
		end
		local 等级=取等级(id)
		local 经验=等级*1000
		local 银子=等级*1000+5000
		玩家数据[id].角色:添加经验(经验,"科举活动",1)
		玩家数据[id].角色:添加储备(储备,"科举活动",1)
		local 奖励参数=取随机数(1,1000)
		if 类型~=nil then
			奖励参数=0
		end
		if 奖励参数<=20 then
			玩家数据[id].道具:给予道具(id,"藏宝图",0)
		elseif 奖励参数<=30 then
			local 名称=取强化石()
			玩家数据[id].道具:给予道具(id,名称,1)
			广播消息({内容=format("#S(科举活动)#R/%s#Y在科举活动中如有神助，妙笔生花，获得了考官奖励的#G/%s",玩家数据[id].角色.名称,名称),频道="xt"})
		elseif 奖励参数<=40 then
			local 名称=取宝石()
			玩家数据[id].道具:给予道具(id,名称,1)
			广播消息({内容=format("#S(科举活动)#R/%s#Y在科举活动中如有神助，妙笔生花，获得了考官奖励的#G/%s",玩家数据[id].角色.名称,名称),频道="xt"})
		elseif 奖励参数<=50 then
			local 名称="金柳露"
			玩家数据[id].道具:给予道具(id,名称,1)
			广播消息({内容=format("#S(科举活动)#R/%s#Y在科举活动中如有神助，妙笔生花，获得了考官奖励的#G/%s",玩家数据[id].角色.名称,名称),频道="xt"})
		end
	else
		科举数据[id].答错=科举数据[id].答错+1
		科举数据[id].连对=0
		常规提示(id,"#Y/你的回答不正确")
	end
	if 科举数据[id].总数>=20 then
		科举数据[id].耗时=os.time()- 科举数据[id].起始
		if 科举数据[id].答对>=15 then
			local 等级=取等级(id)
			local 经验=等级*800*科举数据[id].答对
			local 储备=等级*100*科举数据[id].答对
			玩家数据[id].角色:添加经验(经验,"科举活动最终奖励",1)
			玩家数据[id].角色:添加储备(储备,"科举活动最终精灵",1)
			local 名称="魔兽要诀"
			玩家数据[id].道具:给予道具(id,名称,1)
			广播消息({内容=format("#S(科举活动)#R/%s#Y在科举活动的表现突出，仅用#W/%s#Y秒的时间就正确作答#W/%s#Y/道题目，因此获得了考官特别奖励的#G/%s",玩家数据[id].角色.名称,科举数据[id].耗时,科举数据[id].答对,名称),频道="xt"})
		end
		玩家数据[id].角色:取消任务(玩家数据[id].角色:取任务(7))
		常规提示(id,"#Y/恭喜你成功完成了本轮科举活动")
		玩家数据[id].科举数据=nil
	elseif 科举数据[id].答错>=10 then
		玩家数据[id].角色:取消任务(玩家数据[id].角色:取任务(7))
		常规提示(id,"#Y/你当前累积错误题目数量已达10道，已经无法参加后续的活动了")
		玩家数据[id].科举数据=nil
	else
		self:设置科举题目(连接id,id)
		玩家数据[id].角色:刷新任务跟踪()
	end
end
function 游戏活动类:更新(dt)end
function 游戏活动类:显示(x,y)end

return 游戏活动类