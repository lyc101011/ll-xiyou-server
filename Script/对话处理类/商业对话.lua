-- @Author: baidwwy
-- @Date:   2024-09-11 20:07:56
-- @Last Modified by:   baidwwy
-- @Last Modified time: 2024-11-12 02:58:33
local 场景类_对话商业栏 = class()
local sj = 取随机数
local format = string.format
local insert = table.insert
local ceil = math.ceil
local floor = math.floor
local wps = 取物品数据
local typ = type
local random = 取随机数
local 五行_ = {"金","木","水","火","土"}
function 场景类_对话商业栏:初始化() end

function 场景类_对话商业栏:购买商品(连接id,id,序号,内容)
	self.商品匹配=false
	if type(玩家数据[id].商品列表)~="table" then
		异常账号(id,"未触发商品界面却触发购买请求。请求购买的商品数据为："..内容.商品)
		return 0
	end
	self.组合商品=""
	for n=1,#玩家数据[id].商品列表 do
		self.组合商品=self.组合商品..玩家数据[id].商品列表[n]
		if 玩家数据[id].商品列表[n]==内容.商品 then
			self.商品匹配=true
			break
		end
	end
	if self.商品匹配==false then
		异常账号(id,"所购买的商品不再列表之类。商品列表为"..self.组合商品.."购买商品为"..内容.商品)
		return 0
	end
	内容.数量 = 内容.数量+0
	--先获取一次格子
	local 道具格子=玩家数据[id].角色:取道具格子()
	if 道具格子==0 then
		常规提示(id,"您的道具栏物品已经满啦")
		return 0
	end
	local 商品分割=分割文本(内容.商品,"*")
	local 商品名称=商品分割[1]
	local 商品单价=商品分割[2]
	local 商品附加=商品分割[3]
	local 商品数量=内容.数量
	local 商品类型=内容.类型
	if MRSPXZ[商品名称] then
		商品单价 = MRSPXZ[商品名称].价格
	end
	local 商品道具=物品类()
	商品道具:置对象(商品名称)
	商品数量=qz(商品数量)
	商品单价=qz(商品单价)
	if 商品数量<1 or 商品单价<1 then
		return 0
	end

	if WJGMSPSLXZ[id]==nil then
		WJGMSPSLXZ[id]={}
		WJGMSPSLXZ[id]["神兽涎"]=0
		WJGMSPSLXZ[id]["仙露小丸子"]=0
	end
	if MRSPXZ[商品名称] and MRSPXZ[商品名称].数量 ~= nil and tonumber(MRSPXZ[商品名称].数量)~=nil then
		if MRSPXZ[商品名称].数量 <= 0 then
		    常规提示(id,"此商品今日已售完，请明日再来。")
		    发送数据(玩家数据[id].连接id,381,{MRSPXZ=table.copy(MRSPXZ)})
		    return 0
		elseif 商品数量 > MRSPXZ[商品名称].数量 then
		    常规提示(id,"购买失败，剩余商品数量小于预购数量。")
		    发送数据(玩家数据[id].连接id,381,{MRSPXZ=table.copy(MRSPXZ)})
		    return 0
		elseif 商品名称=="神兽涎" and WJGMSPSLXZ[id]["神兽涎"]+商品数量 > 5 then
		    local xzsla = 5 - WJGMSPSLXZ[id]["神兽涎"]
		    常规提示(id,"购买失败，你只能再购买" ..xzsla .."个神兽涎")
		    发送数据(玩家数据[id].连接id,381,{MRSPXZ=table.copy(MRSPXZ)})
		    return 0
		elseif 商品名称=="仙露小丸子" and WJGMSPSLXZ[id]["仙露小丸子"]+商品数量 > 55 then
		    local xzsla = 55 - WJGMSPSLXZ[id]["仙露小丸子"]
		    常规提示(id,"购买失败，你只能再购买" ..xzsla .."个仙露小丸子")
		    发送数据(玩家数据[id].连接id,381,{MRSPXZ=table.copy(MRSPXZ)})
		    return 0
		end
	end

	if 商品类型 == "银子" then
		self:购买商品银子(商品名称,商品单价,商品数量,商品类型,商品道具,id,商品附加)
	elseif 商品类型 == "副本积分" then
		self:购买商品副本积分(商品名称,商品单价,商品数量,商品类型,商品道具,id)
	elseif 商品类型 == "采矿声望" then
        self:购买商品采矿声望(商品名称,商品单价,商品数量,商品类型,商品道具,id)
	end
end
function 场景类_对话商业栏:购买商品采矿声望(商品名称,商品单价,商品数量,商品类型,商品道具,id)
  local 购买成功 = false
  local 道具格子=0
  if 玩家数据[id].角色.采矿数据.矿业声望< 商品数量*商品单价 then
    商品数量 = qz(玩家数据[id].角色.采矿数据.矿业声望/商品单价)
  end
  if 商品道具.可叠加 == nil or 商品道具.可叠加 == false then
    if 商品数量 > 0 then
      if 玩家数据[id].角色:取空道具格子数量() < 商品数量 then
        商品数量 = 玩家数据[id].角色:取空道具格子数量()
      end
      if 商品数量 > 0 then
        for n=1,商品数量 do
          道具格子=玩家数据[id].角色:取道具格子()
          if 道具格子==0 then
            常规提示(id,"您的道具栏物品已经满啦")
            return 0
          end
          if 商品名称=="召唤兽内丹" then
            玩家数据[id].道具:给予道具(id,"召唤兽内丹",nil,取内丹("低级"),"商店")
          elseif 商品名称=="高级召唤兽内丹" then
            玩家数据[id].道具:给予道具(id,"高级召唤兽内丹",nil,取内丹("高级"),"商店")
          elseif 商品名称=="高级魔兽要诀" then
            玩家数据[id].道具:给予道具(id,"高级魔兽要诀",nil,nil,"商店")
          elseif 商品名称=="灵饰指南书" or 商品名称=="随机灵饰指南书" then
            玩家数据[id].道具:给予道具(id,"灵饰指南书",{6,8,10},nil,"商店")
          elseif 商品名称=="元灵晶石" or 商品名称=="随机元灵晶石" then
            玩家数据[id].道具:给予道具(id,"元灵晶石",{6,8,10},nil,"商店")
          else
            玩家数据[id].道具:给予道具(id,商品名称,nil,nil,"商店")
          end
        end
        购买成功 = true
      else
          常规提示(id,"您的道具栏物品已经满啦")
      end
    else
        常规提示(id,"你的积分不足无法兑换")
    end
  else
    道具格子=玩家数据[id].角色:取道具格子()
    if 道具格子==0 then
      常规提示(id,"您的道具栏物品已经满啦")
      return 0
    end
    if 商品数量 > 0 then
      if 商品名称=="待补充" then

      else
        玩家数据[id].道具:给予道具(id,商品名称,商品数量,nil,"商店")
      end
      购买成功 = true
    else
      常规提示(id,"你的声望不足无法兑换")
    end
  end
  if 购买成功 then
    local 总价格=商品数量*商品单价
    玩家数据[id].角色.采矿数据.矿业声望= 玩家数据[id].角色.采矿数据.矿业声望 -  总价格
    消息提示(id,"#W您花费#R"..总价格.."#W声望积分购买了#R"..商品数量.."#W个#R"..商品名称)
    道具刷新(id)
  end
end
function 场景类_对话商业栏:购买商品银子(商品名称,商品单价,商品数量,商品类型,商品道具,id,商品附加)
	local 购买成功 = false
	local 道具格子=0
	if 取银子(id)< 商品数量*商品单价 then
		商品数量 = qz(取银子(id)/商品单价)
	end
	if 商品道具.可叠加 == nil or 商品道具.可叠加 == false then
		if 商品数量 > 0 then
			if 玩家数据[id].角色:取空道具格子数量() < 商品数量 then
				商品数量 = 玩家数据[id].角色:取空道具格子数量()
			end
			if 商品数量 > 0 then
				for n=1,商品数量 do
					道具格子=玩家数据[id].角色:取道具格子()
					if 道具格子==0 then
						常规提示(id,"您的道具栏物品已经满啦")
						return 0
					end
					if 商品名称=="高级魔兽要诀" then
						玩家数据[id].道具:给予道具(id,"高级魔兽要诀",nil,nil,"商店")
					elseif 商品名称=="灵饰指南书" or 商品名称=="随机灵饰指南书" then
						玩家数据[id].道具:给予道具(id,"灵饰指南书",{6,8,10},nil,"商店")
					elseif 商品名称=="元灵晶石" or 商品名称=="随机元灵晶石" then
						玩家数据[id].道具:给予道具(id,"元灵晶石",{6,8,10},nil,"商店")
					elseif 商品名称=="制造指南书" then
						玩家数据[id].道具:给予道具(id,"制造指南书",{9,10,11,12},nil,"商店")
					elseif 商品名称=="百炼精铁" then
						玩家数据[id].道具:给予道具(id,"百炼精铁",{9,10,11,12},nil,"商店")
					elseif 商品名称=="上古锻造图策" then
						玩家数据[id].道具:给予道具(id,"上古锻造图策",{7,8,9},nil,"商店")
					elseif 商品名称=="炼妖石" then
						玩家数据[id].道具:给予道具(id,"炼妖石",{7,8,9},nil,"商店")
					elseif 商品名称=="随机怪物卡片" then
						local lv=取随机数(1,8)
						玩家数据[id].道具:给予道具(id,"怪物卡片",lv,nil,"商店")
					elseif 商品名称=="战魄" then
						玩家数据[id].道具:给予道具(id,"战魄",商品附加+0,nil,"商店")
					elseif 商品名称=="陨铁" then
						玩家数据[id].道具:给予道具(id,"陨铁",商品附加+0,nil,"商店")
					elseif 商品名称=="珍珠" then
						玩家数据[id].道具:给予道具(id,"珍珠",商品附加+0,nil,"商店")
					elseif 商品名称=="钟灵石" then
						玩家数据[id].道具:给予道具(id,"钟灵石",nil,商品附加+0)
					else
						if 商品名称=="星辉石" or 商品名称=="舍利子" or 商品名称=="翡翠石" or 商品名称=="红玛瑙" or 商品名称=="黑宝石" or 商品名称=="光芒石"  or 商品名称=="月亮石"or 商品名称=="太阳石" or 商品名称=="精魄灵石" then
							local lv=商品附加
							if lv then
								lv=lv+0
							else
								lv=1
							end
							玩家数据[id].道具:给予道具(id,商品名称,lv,nil,"商店")
						else
							玩家数据[id].道具:给予道具(id,商品名称,nil,nil,"商店")
						end
					end
				end
				购买成功 = true
			else
				常规提示(id,"您的道具栏物品已经满啦")
			end
		else
			常规提示(id,"你的银子不足无法购买")
		end
	else
		道具格子=玩家数据[id].角色:取道具格子()
		if 道具格子==0 then
			常规提示(id,"您的道具栏物品已经满啦")
			return 0
		end
		if 商品数量 > 0 then
			if 商品名称=="高级魔兽要诀" then
				玩家数据[id].道具:给予道具(id,"高级魔兽要诀",nil,nil,"商店")
			elseif 商品名称=="灵饰指南书" or 商品名称=="随机灵饰指南书" then
				玩家数据[id].道具:给予道具(id,"灵饰指南书",{6,8,10},nil,"商店")
			elseif 商品名称=="元灵晶石" or 商品名称=="随机元灵晶石" then
				玩家数据[id].道具:给予道具(id,"元灵晶石",{6,8,10},nil,"商店")
			elseif 商品名称=="制造指南书" then
				玩家数据[id].道具:给予道具(id,"制造指南书",{9,10,11,12},nil,"商店")
			 elseif 商品名称=="百炼精铁" then
				玩家数据[id].道具:给予道具(id,"百炼精铁",{9,10,11,12},nil,"商店")
			elseif 商品名称=="上古锻造图策" then
				玩家数据[id].道具:给予道具(id,"上古锻造图策",{7,8,9},nil,"商店")
			elseif 商品名称=="炼妖石" then
				玩家数据[id].道具:给予道具(id,"炼妖石",{7,8,9},nil,"商店")
			elseif 商品名称=="随机怪物卡片" then
				local lv=取随机数(1,8)
				玩家数据[id].道具:给予道具(id,"怪物卡片",lv,nil,"商店")
			elseif 商品名称=="战魄" then
				玩家数据[id].道具:给予道具(id,"战魄",商品附加+0,nil,"商店")
			elseif 商品名称=="珍珠" then
				玩家数据[id].道具:给予道具(id,"珍珠",商品附加+0,nil,"商店")
			else
				玩家数据[id].道具:给予道具(id,商品名称,商品数量,nil,"商店")
			end
			购买成功 = true
			if (商品名称=="神兽涎" or 商品名称=="仙露小丸子") and MRSPXZ[商品名称].数量 ~= nil and tonumber(MRSPXZ[商品名称].数量)~=nil then
			      MRSPXZ[商品名称].数量 = MRSPXZ[商品名称].数量 - 商品数量
			      WJGMSPSLXZ[id][商品名称] = WJGMSPSLXZ[id][商品名称] + 商品数量
			      if MRSPXZ[商品名称].数量 < 0 then --防错
			          MRSPXZ[商品名称].数量 = 0
			      end
			end
		else
			常规提示(id,"你的银子不足无法购买")
		end
	end
	if 购买成功 then
		local 总价格=商品数量*商品单价
		玩家数据[id].角色:扣除银子(总价格,0,0,"购买系统商店商品["..商品名称.."]")
		-- 发送数据(玩家数据[id].连接id,3520,{银子=玩家数据[id].角色.银子, 仙玉=玩家数据[id].角色.仙玉})
		发送数据(玩家数据[id].连接id,3520,{银子=玩家数据[id].角色.银子, 仙玉=f函数.读配置(程序目录..[[data\]]..玩家数据[id].账号..[[\账号信息.txt]], "账号配置", "仙玉") + 0})
		发送数据(玩家数据[id].连接id,38,{内容="#W您花费#R"..总价格.."#W两银子购买了#R"..商品数量.."#W个#R"..商品名称,频道="xx"})
		发送数据(玩家数据[id].连接id,381,{MRSPXZ=table.copy(MRSPXZ)}) --超级技能
		道具刷新(id)
	end
end

function 场景类_对话商业栏:购买商品副本积分(商品名称,商品单价,商品数量,商品类型,商品道具,id)
	local 购买成功 = false
	local 道具格子=0
	if 玩家数据[id].角色.副本积分< 商品数量*商品单价 then
		商品数量 = qz(玩家数据[id].角色.副本积分/商品单价)
	end
	if 商品道具.可叠加 == nil or 商品道具.可叠加 == false then
		if 商品数量 > 0 then
			if 玩家数据[id].角色:取空道具格子数量() < 商品数量 then
				商品数量 = 玩家数据[id].角色:取空道具格子数量()
			end
			if 商品数量 > 0 then
				for n=1,商品数量 do
					道具格子=玩家数据[id].角色:取道具格子()
					if 道具格子==0 then
						常规提示(id,"您的道具栏物品已经满啦")
						return 0
					end
					if 商品名称=="召唤兽内丹" then
						玩家数据[id].道具:给予道具(id,"召唤兽内丹",nil,取内丹("低级"),"商店")
					elseif 商品名称=="高级召唤兽内丹" then
						玩家数据[id].道具:给予道具(id,"高级召唤兽内丹",nil,取内丹("高级"),"商店")
					elseif 商品名称=="高级魔兽要诀" then
						玩家数据[id].道具:给予道具(id,"高级魔兽要诀",nil,nil,"商店")
						elseif 商品名称=="灵饰指南书" or 商品名称=="随机灵饰指南书" then
				玩家数据[id].道具:给予道具(id,"灵饰指南书",{6,8,10},nil,"商店")
			elseif 商品名称=="元灵晶石" or 商品名称=="随机元灵晶石" then
				玩家数据[id].道具:给予道具(id,"元灵晶石",{6,8,10},nil,"商店")
					else
						玩家数据[id].道具:给予道具(id,商品名称,nil,nil,"商店")
					end
				end
				购买成功 = true
			else
					常规提示(id,"您的道具栏物品已经满啦")
			end
		else
				常规提示(id,"你的积分不足无法兑换")
		end
	else
		道具格子=玩家数据[id].角色:取道具格子()
		if 道具格子==0 then
			常规提示(id,"您的道具栏物品已经满啦")
			return 0
		end
		if 商品数量 > 0 then
			if 商品名称=="待补充" then

			else
				玩家数据[id].道具:给予道具(id,商品名称,商品数量,nil,"商店")
			end
			购买成功 = true
		else
			常规提示(id,"你的积分不足无法兑换")
		end
	end
	if 购买成功 then
		local 总价格=商品数量*商品单价
		玩家数据[id].角色.副本积分 = 玩家数据[id].角色.副本积分 -  总价格
		消息提示(id,"#W您花费#R"..总价格.."#W副本积分购买了#R"..商品数量.."#W个#R"..商品名称)
		道具刷新(id)
	end
end

function 场景类_对话商业栏:购买商品秘制积分(商品名称,商品单价,商品数量,商品类型,商品道具,id,商品附加)
	local 购买成功 = false
	local 道具格子=0
	if 玩家数据[id].角色.秘制积分< 商品数量*商品单价 then
		商品数量 = qz(玩家数据[id].角色.秘制积分/商品单价)
	end
	if 商品道具.可叠加 == nil or 商品道具.可叠加 == false then
		if 商品数量 > 0 then
			if 玩家数据[id].角色:取空道具格子数量() < 商品数量 then
				商品数量 = 玩家数据[id].角色:取空道具格子数量()
			end
			if 商品数量 > 0 then
				for n=1,商品数量 do
					道具格子=玩家数据[id].角色:取道具格子()
					if 道具格子==0 then
						常规提示(id,"您的道具栏物品已经满啦")
						return 0
					end
					if 商品名称=="待补充" then

					else
						玩家数据[id].道具:给予道具(id,商品名称,nil,商品附加+0,"商店")
					end
				end
				购买成功 = true
			else
					常规提示(id,"您的道具栏物品已经满啦")
			end
		else
				常规提示(id,"你的积分不足无法兑换")
		end
	else
		道具格子=玩家数据[id].角色:取道具格子()
		if 道具格子==0 then
			常规提示(id,"您的道具栏物品已经满啦")
			return 0
		end
		if 商品数量 > 0 then
			if 商品名称=="待补充" then

			else
				玩家数据[id].道具:给予道具(id,商品名称,商品数量,商品附加+0,"商店")
			end
			购买成功 = true
		else
			常规提示(id,"你的积分不足无法兑换")
		end
	end
	if 购买成功 then
		local 总价格=商品数量*商品单价
		玩家数据[id].角色.秘制积分 = 玩家数据[id].角色.秘制积分 -  总价格
		发送数据(玩家数据[id].连接id,38,{内容="#W您花费#R"..总价格.."#W秘制积分购买了#R"..商品数量.."#W个#R"..商品名称,频道="xx"})
		道具刷新(id)
	end
end

function 场景类_对话商业栏:购买商品门贡法宝(商品名称,商品单价,商品数量,商品类型,商品道具,id,商品附加)
	商品数量=1
	local 购买成功 = false
	if 玩家数据[id].角色.门贡< 1*商品单价 then
		常规提示(id,"你的门派贡献不足无法兑换")
		return
	end
	玩家数据[id].道具:给予法宝(id,商品名称)
	购买成功 = true
	if 购买成功 then
		local 总价格=1*商品单价
		玩家数据[id].角色.门贡 = 玩家数据[id].角色.门贡 -   总价格
		发送数据(玩家数据[id].连接id,38,{内容="#W您花费#R"..总价格.."#W门派贡献购买了#R"..商品数量.."#W个#R"..商品名称,频道="xx"})
		道具刷新(id)
	end
end

function 场景类_对话商业栏:购买商品门贡灵宝(商品名称,商品单价,商品数量,商品类型,商品道具,id,商品附加)
	商品数量=1
	local 购买成功 = false
end

function 场景类_对话商业栏:治疗召唤兽气血(连接id,id)

		if  玩家数据[id].队伍~=0 then
      for n=1,#队伍数据[玩家数据[id].队伍].成员数据 do
        	local 全员id=队伍数据[玩家数据[id].队伍].成员数据[n]

					local 气血=玩家数据[全员id].召唤兽:取气血差()
					local 魔法=玩家数据[全员id].召唤兽:取魔法差()
					local 银子=math.floor(气血*0.5+魔法)
					if 玩家数据[全员id].角色.银子<银子 then
						发送数据(玩家数据[全员id].连接id,1501,{名称="超级巫医",模型="男人_巫医",对话=format("本次需要收费%s两银子，你没那么多的银子哟#24",银子)})
						return
					end
					玩家数据[全员id].角色:扣除银子(银子,0,0,"治疗召唤兽气血魔法",1)
					for n=1,#玩家数据[全员id].召唤兽.数据 do
						玩家数据[全员id].召唤兽.数据[n].气血=玩家数据[全员id].召唤兽.数据[n].最大气血
						玩家数据[全员id].召唤兽.数据[n].魔法=玩家数据[全员id].召唤兽.数据[n].最大魔法
					end
					if 玩家数据[全员id].角色.参战信息~=nil and 玩家数据[全员id].角色.参战宝宝 then
						发送数据(玩家数据[全员id].连接id,20.1,{气血=玩家数据[全员id].角色.参战宝宝.最大气血,魔法=玩家数据[全员id].角色.参战宝宝.最大魔法})
					end
					发送数据(连接id,1501,{名称="超级巫医",模型="男人_巫医",对话=format("收您%s两银子，已将您全队的所有召唤兽气血和魔法全部恢复至最佳状态。",银子)})
			end
		else-------单人

	local 气血=玩家数据[id].召唤兽:取气血差()
	local 魔法=玩家数据[id].召唤兽:取魔法差()
	local 银子=math.floor(气血*0.5+魔法)
	if 玩家数据[id].角色.银子<银子 then
		发送数据(连接id,1501,{名称="超级巫医",模型="男人_巫医",对话=format("本次需要收费%s两银子，你没那么多的银子哟#24",银子)})
		return
	end
	玩家数据[id].角色:扣除银子(银子,0,0,"治疗召唤兽气血魔法",1)
	for n=1,#玩家数据[id].召唤兽.数据 do
		玩家数据[id].召唤兽.数据[n].气血=玩家数据[id].召唤兽.数据[n].最大气血
		玩家数据[id].召唤兽.数据[n].魔法=玩家数据[id].召唤兽.数据[n].最大魔法
	end
	if 玩家数据[id].角色.参战信息~=nil and 玩家数据[id].角色.参战宝宝 then
		发送数据(玩家数据[id].连接id,20.1,{气血=玩家数据[id].角色.参战宝宝.最大气血,魔法=玩家数据[id].角色.参战宝宝.最大魔法})
	end
	发送数据(连接id,1501,{名称="超级巫医",模型="男人_巫医",对话=format("收您%s两银子，已将您的所有召唤兽气血和魔法全部恢复至最佳状态。",银子)})
	end
end

function 场景类_对话商业栏:治疗召唤兽忠诚(连接id,id)


		if  玩家数据[id].队伍~=0 then
      for n=1,#队伍数据[玩家数据[id].队伍].成员数据 do
        	local 全员id=队伍数据[玩家数据[id].队伍].成员数据[n]

					local 忠诚=玩家数据[全员id].召唤兽:取忠诚差()
					local 银子=忠诚*100
					if 玩家数据[全员id].角色.银子<银子 and not 玩家数据[全员id].角色.武神坛角色 then
						发送数据(玩家数据[全员id].连接id,1501,{名称="超级巫医",模型="男人_巫医",对话=format("本次需要收费%s两银子，你没那么多的银子哟#24",银子)})
						return
					end
					if not 玩家数据[全员id].角色.武神坛角色 then --武神坛
						玩家数据[全员id].角色:扣除银子(银子,0,0,"治疗召唤兽忠诚",1)
					end
					for n=1,#玩家数据[全员id].召唤兽.数据 do
						if 玩家数据[全员id].召唤兽.数据[n].忠诚<100 then
							玩家数据[全员id].召唤兽.数据[n].忠诚=100
						end
					end
					发送数据(玩家数据[全员id].连接id,1501,{名称="超级巫医",模型="男人_巫医",对话=format("收您%s两银子，已将您全队的所有召唤兽忠诚恢复至最佳状态。",银子)})
			end

		else ------单人

				local 忠诚=玩家数据[id].召唤兽:取忠诚差()
				local 银子=忠诚*100
				if 玩家数据[id].角色.银子<银子 and not 玩家数据[id].角色.武神坛角色 then
					发送数据(连接id,1501,{名称="超级巫医",模型="男人_巫医",对话=format("本次需要收费%s两银子，你没那么多的银子哟#24",银子)})
					return
				end
				if not 玩家数据[id].角色.武神坛角色 then --武神坛
					玩家数据[id].角色:扣除银子(银子,0,0,"治疗召唤兽忠诚",1)
				end
				for n=1,#玩家数据[id].召唤兽.数据 do
					if 玩家数据[id].召唤兽.数据[n].忠诚<100 then
						玩家数据[id].召唤兽.数据[n].忠诚=100
					end
				end
				发送数据(连接id,1501,{名称="超级巫医",模型="男人_巫医",对话=format("收您%s两银子，已将您的所有召唤兽忠诚恢复至最佳状态。",银子)})
		end
end

function 场景类_对话商业栏:治疗召唤兽全体(连接id,id)

		if  玩家数据[id].队伍~=0 then
      for n=1,#队伍数据[玩家数据[id].队伍].成员数据 do
        local 全员id=队伍数据[玩家数据[id].队伍].成员数据[n]
				local 忠诚=玩家数据[全员id].召唤兽:取忠诚差()
				local 银子=忠诚*取随机数(80,99)
				local 气血=玩家数据[全员id].召唤兽:取气血差()
				local 魔法=玩家数据[全员id].召唤兽:取魔法差()
				银子=银子+math.floor(气血*0.5)+魔法
				if 玩家数据[全员id].角色.银子<银子 and not 玩家数据[全员id].角色.武神坛角色 then --武神坛
					发送数据(玩家数据[全员id].连接id,1501,{名称="超级巫医",模型="男人_巫医",对话=format("本次需要收费%s两银子，你没那么多的银子哟#24",银子)})
					return
				end
				if not 玩家数据[全员id].角色.武神坛角色 then --武神坛
					玩家数据[全员id].角色:扣除银子(银子,0,0,"治疗召唤兽忠诚、气血、魔法",1)
				end

				for n=1,#玩家数据[全员id].召唤兽.数据 do
					玩家数据[全员id].召唤兽.数据[n].气血=玩家数据[全员id].召唤兽.数据[n].最大气血
					玩家数据[全员id].召唤兽.数据[n].魔法=玩家数据[全员id].召唤兽.数据[n].最大魔法
					if 玩家数据[全员id].召唤兽.数据[n].忠诚<100 then
						玩家数据[全员id].召唤兽.数据[n].忠诚=100
					end
				end
				if 玩家数据[全员id].角色.参战信息~=nil and 玩家数据[全员id].角色.参战宝宝 then
					发送数据(玩家数据[全员id].连接id,20.1,{气血=玩家数据[全员id].角色.参战宝宝.最大气血,魔法=玩家数据[全员id].角色.参战宝宝.最大魔法})
				end
				发送数据(玩家数据[全员id].连接id,1501,{名称="超级巫医",模型="男人_巫医",对话=format("收您%s两银子，已将您全队所有召唤兽气血、魔法、忠诚恢复至最佳状态。",银子)})
			end


		else---单人

	local 忠诚=玩家数据[id].召唤兽:取忠诚差()
	local 银子=忠诚*取随机数(80,99)
	local 气血=玩家数据[id].召唤兽:取气血差()
	local 魔法=玩家数据[id].召唤兽:取魔法差()
	银子=银子+math.floor(气血*0.5)+魔法
	if 玩家数据[id].角色.银子<银子 and not 玩家数据[id].角色.武神坛角色 then --武神坛
		发送数据(连接id,1501,{名称="超级巫医",模型="男人_巫医",对话=format("本次需要收费%s两银子，你没那么多的银子哟#24",银子)})
		return
	end
	if not 玩家数据[id].角色.武神坛角色 then --武神坛
		玩家数据[id].角色:扣除银子(银子,0,0,"治疗召唤兽忠诚、气血、魔法",1)
	end

	for n=1,#玩家数据[id].召唤兽.数据 do
		玩家数据[id].召唤兽.数据[n].气血=玩家数据[id].召唤兽.数据[n].最大气血
		玩家数据[id].召唤兽.数据[n].魔法=玩家数据[id].召唤兽.数据[n].最大魔法
		if 玩家数据[id].召唤兽.数据[n].忠诚<100 then
			玩家数据[id].召唤兽.数据[n].忠诚=100
		end
	end
	if 玩家数据[id].角色.参战信息~=nil and 玩家数据[id].角色.参战宝宝 then
		发送数据(玩家数据[id].连接id,20.1,{气血=玩家数据[id].角色.参战宝宝.最大气血,魔法=玩家数据[id].角色.参战宝宝.最大魔法})
	end
	发送数据(连接id,1501,{名称="超级巫医",模型="男人_巫医",对话=format("收您%s两银子，已将您的所有召唤兽气血、魔法、忠诚恢复至最佳状态。",银子)})
	end
end
function 场景类_对话商业栏:更新(dt)end
function 场景类_对话商业栏:显示(x,y)end

return 场景类_对话商业栏